{"version":3,"sources":["data/index.js","components/Accordion/index.jsx","containers/app/App.jsx","utils/statistics/reportWebVitals.js","index.jsx"],"names":["items","title","subTitle","description","id","Accordion","React","useState","isShow","setIsShow","height","setHeight","isActive","className","role","map","onClick","prevState","handleOpen","ref","scrollHeight","style","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oKAAaA,EAAQ,CACpB,CACCC,MAAO,kCACPC,SAAU,kCACVC,YAAa,gJACXC,GAAI,GAEP,CACCH,MAAO,qBACPC,SAAU,uBACVC,YAAa,4EACXC,GAAI,GAEP,CACCH,MAAO,+CACPC,SAAU,6BACVC,YAAa,wOACXC,GAAI,GAEP,CACCH,MAAO,gDACPC,SAAU,yCACVC,YAAa,iMACXC,GAAI,I,cC2BOC,EA7CG,WAChB,MAA4BC,IAAMC,UAAS,GAA3C,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAA4BH,IAAMC,SAAS,GAA3C,mBAAOG,EAAP,KAAeC,EAAf,KACMC,EAAW,SAACR,GAAD,OAAQA,IAAOI,GAMhC,OACE,qBAAKK,UAAU,YAAf,SACE,sBAAKA,UAAU,YAAf,UACE,oBAAIA,UAAU,kBAAd,2BACA,mBAAGA,UAAU,iBAAb,gOAGA,qBACEA,UAAU,iBACVC,KAAK,UAFP,SAIGd,EAAMe,KAAI,gBAAGd,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAUC,EAApB,EAAoBA,YAAaC,EAAjC,EAAiCA,GAAjC,OACT,sBAEES,UAAU,iBACVG,QAAS,kBAnBF,SAACZ,GAClBK,GAAU,SAACQ,GAAD,OAAeA,IAAcb,EAAK,EAAIA,KAkBvBc,CAAWd,IAH5B,UAKE,sBAAMS,UAAU,uBAAhB,SAAyCD,EAASR,GAAY,IAAN,MACxD,sBAAMS,UAAU,uBAAhB,SAAwCZ,IACxC,sBACEkB,IAAK,SAAAA,GAAG,OAAIP,EAASR,IAAOO,EAAS,OAACQ,QAAD,IAACA,OAAD,EAACA,EAAKC,eAC3CP,UAAU,yBACVQ,MAAO,CAACX,OAAO,GAAD,OAAKE,EAASR,GAAKM,EAAS,EAA5B,OACd,cAAcE,EAASR,GAJzB,UAME,8BAAMF,IACN,4BAAIC,SAbDC,cClBJkB,G,MAJH,kBACV,cAAC,EAAD,MCUaC,G,MAdS,SAACC,GACjBA,GAAeA,aAAuBC,UACtC,wCAAqBC,MACjB,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC/BJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,QCJxBQ,IAASC,OACP,cAAC,IAAMC,WAAP,UAEE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAG1Bb,K","file":"static/js/main.91164ba9.chunk.js","sourcesContent":["export const items = [\n\t{\n\t\ttitle: 'When and now it should be used?',\n\t\tsubTitle: 'Seriously, Don\\'t Use Icon Fonts',\n\t\tdescription: 'An accordion always contains the category title, expanded and a collapsed \\n state an icon indicating expansion, and the spacing between them',\n    id: 1\n\t},\n\t{\n\t\ttitle: 'What an accordion?',\n\t\tsubTitle: 'Show/Hiden operation',\n\t\tdescription: 'An accordion always contains the category title, expanded and a collapsed',\n    id: 2\n\t},\t\n\t{\n\t\ttitle: 'What is the user clicks an a collapsed card?',\n\t\tsubTitle: 'They Fail Poorly and Often',\n\t\tdescription: 'When your icon font fails, the browser treats it like any other font and replaces it with a fallback. Best-case scenario, you\\'ve chosen your fallback characters carefully and something weird-looking but communicative still loads.',\n    id: 3\n\t},\n\t{\n\t\ttitle: 'How to cloose an icon to indicate expansions?',\n\t\tsubTitle: 'They\\'re a Nightmare if You\\'re Dyslexic',\n\t\tdescription: 'Many dyslexic people find it helpful to swap out a website\\'s typeface for something like OpenDyslexic. But icon fonts get replaced as well, which makes for a frustratingly broken experience.',\n    id: 4\n\t},\n];","import React from 'react';\n\nimport { items } from '../../data';\nimport './style.scss';\n\nconst Accordion = () => {\n  const [isShow, setIsShow] = React.useState(false);\n  const [height, setHeight] = React.useState(0);\n  const isActive = (id) => id === isShow;\n\n  const handleOpen = (id) => {    \n    setIsShow((prevState) => prevState === id ? 0 : id);\n  };\n\n  return (\n    <div className='container'>\n      <div className='accordion'>\n        <h2 className='accordion-title'>The accordion</h2>\n        <p className='accordion-text'>\n          The accordion is a grophical control element comprising a vertically stacked list of items, such as label a thumbnails. Each item can be `expanded` or `collapsed` to reveal the content associated with that item\n        </p>\n        <div \n          className='accordion-list' \n          role=\"tablist\" \n        >\n          {items.map(({ title, subTitle, description, id }) => (\n            <div\n              key={id}\n              className='accordion-item' \n              onClick={() => handleOpen(id)}\n            >\n              <span className='accordion-item__icon'>{!isActive(id) ? '+' : '-'}</span>\n              <span className='accordion-item__text'>{title}</span>\n              <div\n                ref={ref => isActive(id) && setHeight(ref?.scrollHeight)}\n                className='accordion-item_content'\n                style={{height: `${isActive(id)? height : 0}px`}}\n                aria-hidden={ isActive(id) }\n              >\n                <div>{subTitle}</div>\n                <p>{description}</p>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Accordion;","import React from 'react'\n\nimport Accordion from '../../components/Accordion'\nimport '../../styles/index.scss';\n\nconst App = () => (\n  <Accordion />\n)\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry)\n                getFID(onPerfEntry)\n                getFCP(onPerfEntry)\n                getLCP(onPerfEntry)\n                getTTFB(onPerfEntry)\n            },\n        )\n    }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { CssBaseline } from '@material-ui/core';\nimport App from './containers/app/App'\nimport reportWebVitals from './utils/statistics/reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <CssBaseline /> */}\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\nreportWebVitals();\n"],"sourceRoot":""}